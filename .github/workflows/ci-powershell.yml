name: Evotec PowerShell Module CI

on:
  workflow_call:
    inputs:
      module_manifest:
        description: "Path to module .psd1 to refresh/commit (optional when rebuild_psd1=false)"
        required: false
        default: ''
        type: string
      build_script:
        description: "Path to Build-Module.ps1"
        required: false
        default: "Module/Build/Build-Module.ps1"
        type: string
      commit_psd1:
        description: "Commit refreshed PSD1 back to branch (safe for same-repo PRs/pushes)"
        required: false
        default: false
        type: boolean
      rebuild_psd1:
        description: "Refresh module manifest before tests"
        required: false
        default: false
        type: boolean
      solution:
        description: "Optional .sln to build before tests"
        required: false
        default: ""
        type: string
      dotnet_version:
        description: ".NET SDK for building solution"
        required: false
        default: "8.0.x"
        type: string
      ps_versions:
        description: 'JSON array of PowerShell versions to test ("5.1" and/or "7")'
        required: false
        default: '["5.1","7"]'
        type: string
      runs_on:
        description: 'JSON array of runner labels (e.g. ["windows-latest"] or ["self-hosted","windows"])'
        required: false
        default: '["windows-latest"]'
        type: string
      test_script:
        description: 'Optional path to a test script to run (uses Pester if empty)'
        required: false
        default: ''
        type: string
      summarize_failures:
        description: 'Show only failing tests summary when job fails'
        required: false
        default: true
        type: boolean
      tests_path:
        description: 'Path to folder with Pester tests'
        required: false
        default: 'Module/Tests'
        type: string
      empty_tests_behavior:
        description: "Behavior when no test files are found: 'skip' | 'warn' | 'fail'"
        required: false
        default: 'skip'
        type: string

permissions:
  contents: write

jobs:
  test:
    name: PowerShell ${{ matrix.psver }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    concurrency:
      group: ${{ github.workflow }}-pester-${{ matrix.psver }}-${{ github.event.pull_request.head.sha || github.sha }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        psver: ${{ fromJSON(inputs.ps_versions) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Refresh PSD1 (optional)
        if: ${{ inputs.rebuild_psd1 && inputs.module_manifest != '' }}
        uses: ./.github/actions/ps-refresh-psd1
        with:
          build_script: ${{ inputs.build_script }}
          manifest_path: ${{ inputs.module_manifest }}
          commit_changes: ${{ inputs.commit_psd1 }}

      - name: Detect test files
        id: tests
        shell: pwsh
        run: |
          $path = '${{ inputs.tests_path }}'
          $exists = Test-Path -Path $path
          $count = 0
          if ($exists) {
            $count = (Get-ChildItem -Path $path -Recurse -File -Include *.Tests.ps1,*.tests.ps1 -ErrorAction SilentlyContinue | Measure-Object).Count
          }
          Write-Host "Found $count test files under $path"
          "has_tests=$([string]([bool]($count -gt 0)))" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Setup .NET (optional)
        if: ${{ inputs.solution != '' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install test dependencies (PowerShell 5.1)
        if: ${{ matrix.psver == '5.1' }}
        shell: powershell
        run: |
          Write-Host "PowerShell: $($PSVersionTable.PSVersion)"
          Install-Module Pester -Force -SkipPublisherCheck -AllowClobber
          Install-Module PSWriteColor -Force -SkipPublisherCheck -AllowClobber

      - name: Install test dependencies (PowerShell 7)
        if: ${{ matrix.psver != '5.1' }}
        shell: pwsh
        run: |
          Write-Host "PowerShell: $($PSVersionTable.PSVersion)"
          Install-Module Pester -Force -SkipPublisherCheck -AllowClobber
          Install-Module PSWriteColor -Force -SkipPublisherCheck -AllowClobber

      - name: Build .NET solution
        if: ${{ inputs.solution != '' }}
        run: |
          dotnet restore "${{ inputs.solution }}"
          dotnet build   "${{ inputs.solution }}" --configuration Debug --no-restore

      - name: Run tests (PowerShell 5.1)
        if: ${{ matrix.psver == '5.1' && steps.tests.outputs.has_tests == 'true' }}
        shell: powershell
        run: |
          if ('${{ inputs.test_script }}') {
            & '${{ inputs.test_script }}'
          } else {
            $cfg = New-PesterConfiguration
            $cfg.Run.Path = '${{ inputs.tests_path }}'
            $cfg.Run.Exit = $true
            $cfg.TestResult.Enabled = $true
            $cfg.TestResult.OutputFormat = 'NUnitXml'
            $cfg.TestResult.OutputPath = 'Module/TestResults.xml'
            Invoke-Pester -Configuration $cfg
          }
        timeout-minutes: 30

      - name: Run tests (PowerShell 7)
        if: ${{ matrix.psver != '5.1' && steps.tests.outputs.has_tests == 'true' }}
        shell: pwsh
        run: |
          if ('${{ inputs.test_script }}') {
            & '${{ inputs.test_script }}'
          } else {
            $cfg = New-PesterConfiguration
            $cfg.Run.Path = '${{ inputs.tests_path }}'
            $cfg.Run.Exit = $true
            $cfg.TestResult.Enabled = $true
            $cfg.TestResult.OutputFormat = 'NUnitXml'
            $cfg.TestResult.OutputPath = 'Module/TestResults.xml'
            Invoke-Pester -Configuration $cfg
          }
        timeout-minutes: 30

      - name: Summarize failing tests
        if: failure() && inputs.summarize_failures && steps.tests.outputs.has_tests == 'true'
        uses: evotecit/github-actions/.github/actions/pester-summary@master
        with:
          results_file: Module/TestResults.xml

      - name: Upload test results
        if: always() && steps.tests.outputs.has_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ps${{ matrix.psver }}
          path: Module/TestResults.xml

      - name: Emit test counts JSON
        if: always() && steps.tests.outputs.has_tests == 'true'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $total = 0; $failed = 0; $passed = 0; $skipped = 0
          if (Test-Path 'Module/TestResults.xml') {
            [xml]$xml = Get-Content -LiteralPath 'Module/TestResults.xml'
            $cases = @($xml.SelectNodes('//test-case'))
            foreach ($c in $cases) {
              $total++
              $res = ($c.result + '')
              switch ($res) {
                'Passed' { $passed++ }
                'Failure' { $failed++ }
                'Error' { $failed++ }
                'Skipped' { $skipped++ }
                'Ignored' { $skipped++ }
                'Inconclusive' { $skipped++ }
                default { $skipped++ }
              }
            }
          }
          $obj = [ordered]@{
            kind   = 'pester'
            os     = 'Windows'
            ps     = "${{ matrix.psver }}"
            total  = $total
            passed = $passed
            failed = $failed
            skipped= $skipped
          }
          $outDir = Join-Path $PWD 'artifacts/Counts'
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          $jsonPath = Join-Path $outDir ("pester-${{ matrix.psver }}.json")
          ($obj | ConvertTo-Json -Depth 4) | Out-File -FilePath $jsonPath -Encoding utf8 -Force

      - name: Upload test counts
        if: always() && steps.tests.outputs.has_tests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: counts-pester-${{ matrix.psver }}
          path: artifacts/Counts/*.json

      - name: Emit empty counts when no tests
        if: ${{ steps.tests.outputs.has_tests == 'false' }}
        shell: pwsh
        run: |
          $obj = [ordered]@{
            kind   = 'pester'
            os     = 'Windows'
            ps     = "${{ matrix.psver }}"
            total  = 0
            passed = 0
            failed = 0
            skipped= 0
            note   = "No Pester test files found under '${{ inputs.tests_path }}' (treated as '${{ inputs.empty_tests_behavior }}')."
          }
          $outDir = Join-Path $PWD 'artifacts/Counts'
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          $jsonPath = Join-Path $outDir ("pester-${{ matrix.psver }}.json")
          ($obj | ConvertTo-Json -Depth 4) | Out-File -FilePath $jsonPath -Encoding utf8 -Force
      
      - name: Upload empty counts
        if: ${{ steps.tests.outputs.has_tests == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: counts-pester-${{ matrix.psver }}
          path: artifacts/Counts/*.json

      - name: No tests found policy
        if: ${{ steps.tests.outputs.has_tests == 'false' }}
        shell: pwsh
        env:
          EMPTY_BEHAVIOR: ${{ inputs.empty_tests_behavior }}
          SUMMARY_PATH: ${{ env.GITHUB_STEP_SUMMARY }}
        run: |
          $msg = "No Pester test files found under '${{ inputs.tests_path }}'."
          switch (($env:EMPTY_BEHAVIOR ?? 'skip').ToLowerInvariant()) {
            'fail' { Write-Error $msg; if ($env:SUMMARY_PATH) { "### PowerShell (Pester)`n- ❌ $msg`n" | Out-File -FilePath $env:SUMMARY_PATH -Append -Encoding utf8 }; exit 1 }
            'warn' { Write-Warning $msg; if ($env:SUMMARY_PATH) { "### PowerShell (Pester)`n- ⚠️ $msg`n" | Out-File -FilePath $env:SUMMARY_PATH -Append -Encoding utf8 } }
            Default { Write-Host $msg; if ($env:SUMMARY_PATH) { "### PowerShell (Pester)`n- ℹ️ $msg`n" | Out-File -FilePath $env:SUMMARY_PATH -Append -Encoding utf8 } }
          }
