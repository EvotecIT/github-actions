name: Evotec .NET CI

on:
  workflow_call:
    inputs:
      solution:
        description: "Path to .sln (or directory to search)"
        required: false
        default: "**/*.sln"
        type: string
      build_configuration:
        description: "Build configuration"
        required: false
        default: "Debug"
        type: string
      dotnet_versions:
        description: 'JSON array of SDK versions (e.g. ["8.0.x"])'
        required: false
        default: '["8.0.x"]'
        type: string
      frameworks:
        description: 'JSON array of target frameworks to test (empty = all)'
        required: false
        default: '[]'
        type: string
      os:
        description: 'JSON array of runs-on labels (e.g. ["windows-latest"], or ["self-hosted","windows"])'
        required: false
        default: '["windows-latest"]'
        type: string
      test_verbosity:
        description: 'minimal | normal | detailed'
        required: false
        default: 'minimal'
        type: string
      summarize_failures:
        description: 'Show only failing tests summary when job fails'
        required: false
        default: true
        type: boolean
      enable_codecov:
        description: 'Upload coverage to Codecov'
        required: false
        default: false
        type: boolean
      codecov_token:
        description: 'Codecov token (if tokenless upload not enabled)'
        required: false
        type: string
      restore_build_first:
        description: 'Run restore/build before tests'
        required: false
        default: true
        type: boolean
      auto_detect_sdks:
        description: 'Automatically detect SDKs from global.json and TFMs'
        required: false
        default: true
        type: boolean
      auto_detect_frameworks:
        description: 'Automatically detect TFMs from *.Tests.csproj when frameworks is empty'
        required: false
        default: true
        type: boolean
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  detect:
    if: ${{ false }}
    name: detect (frameworks, sdks)
    runs-on: ${{ fromJSON(inputs.os) }}
    outputs:
      frameworks: ${{ steps.out.outputs.frameworks }}
      sdks: ${{ steps.out.outputs.sdks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Resolve and detect
        id: out
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          # solution
          $pattern = '${{ inputs.solution }}'
          if (Test-Path $pattern) {
            $sln = Resolve-Path $pattern | Select-Object -First 1
          } else {
            $sln = Get-ChildItem -Recurse -Path . -Filter *.sln | Select-Object -Expand FullName -First 1
          }
          if (-not $sln) { throw "No solution .sln found (pattern: $pattern)" }
          "sln=$sln" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

          # frameworks
          $fwJson = '${{ inputs.frameworks }}'
          $autoFw = [System.Convert]::ToBoolean('${{ inputs.auto_detect_frameworks }}')
          $frameworks = @()
          try { if ($fwJson -and $fwJson -ne '[]') { $frameworks = ConvertFrom-Json -InputObject $fwJson } } catch { $frameworks = @() }
          if ($autoFw -and ($null -eq $frameworks -or $frameworks.Count -eq 0)) {
            $testProjects = Get-ChildItem -Recurse -Path . -Filter *.csproj | Where-Object { $_.Name -match '\\.Tests\\.csproj$' }
            $set = [System.Collections.Generic.HashSet[string]]::new([System.StringComparer]::OrdinalIgnoreCase)
            foreach ($proj in $testProjects) {
              try {
                [xml]$xml = Get-Content -LiteralPath $proj.FullName
                $tfs = @();
                $tfs += ($xml.Project.PropertyGroup.TargetFrameworks | ForEach-Object { $_.InnerText })
                $tfs += ($xml.Project.PropertyGroup.TargetFramework  | ForEach-Object { $_.InnerText })
                foreach ($tf in ($tfs -split ';' | Where-Object { $_ -and $_.Trim() } | ForEach-Object { $_.Trim() })) {
                  [void]$set.Add($tf)
                }
              } catch { }
            }
            $frameworks = @($set)
            # Filter out net4x on non-Windows
            if ($env:RUNNER_OS -ne 'Windows') {
              $frameworks = @($frameworks | Where-Object { $_ -notmatch '^net4' })
            }
            if ($frameworks.Count -eq 0) { $frameworks = @('') } # empty means no -f
          }
          $fwOut = ($frameworks | ConvertTo-Json -Compress)
          "frameworks=$fwOut" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Detected frameworks: $fwOut"

          # sdks
          $sdks = [System.Collections.Generic.HashSet[string]]::new([System.StringComparer]::OrdinalIgnoreCase)
          $autoSdks = [System.Convert]::ToBoolean('${{ inputs.auto_detect_sdks }}')
          if ($autoSdks) {
            $globals = Get-ChildItem -Recurse -Path . -Filter global.json -File -ErrorAction SilentlyContinue
            foreach ($g in $globals) {
              try {
                $gj = Get-Content -Raw -LiteralPath $g.FullName | ConvertFrom-Json
                $ver = $gj.sdk.version
                if ($ver -match '^(\d+)\.(\d+)\.') { [void]$sdks.Add("$($Matches[1]).$($Matches[2]).x") }
              } catch { }
            }
            foreach ($fw in $frameworks) {
              if ($fw -match '^net(\d+)\.(\d+)$') { [void]$sdks.Add("$($Matches[1]).$($Matches[2]).x") }
            }
          }
          if ($sdks.Count -eq 0) {
            try {
              $raw = '${{ inputs.dotnet_versions }}'
              $inp = @(); if ($raw) { $inp = ConvertFrom-Json -InputObject $raw }
              foreach ($i in $inp) { if ($i) { [void]$sdks.Add([string]$i) } }
            } catch { }
          }
          if ($sdks.Count -eq 0) { [void]$sdks.Add('8.0.x') }
          $sdkOut = ($sdks | ConvertTo-Json -Compress)
          "sdks=$sdkOut" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Detected SDKs: $sdkOut"

  test:
    name: dotnet (SDK ${{ matrix.sdk }})
    runs-on: ${{ fromJSON(inputs.os) }}
    strategy:
      fail-fast: false
      matrix:
        sdk: ${{ fromJSON(inputs.dotnet_versions) }}
      max-parallel: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show matrix inputs
        shell: pwsh
        run: |
          Write-Host "SDK: ${{ matrix.sdk }}"
          Write-Host "Framework (matrix): '${{ matrix.framework }}'"
          Write-Host "Frameworks JSON (input): '${{ inputs.frameworks }}'"
          "SDK: ${{ matrix.sdk }}`nFramework (matrix): '${{ matrix.framework }}'" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: Resolve solution path
        id: sln
        shell: pwsh
        run: |
          $pattern = '${{ inputs.solution }}'
          if (Test-Path $pattern) {
            $sln = Resolve-Path $pattern | Select-Object -First 1
          } else {
            $sln = Get-ChildItem -Recurse -Path . -Filter *.sln | Select-Object -Expand FullName -First 1
          }
          if (-not $sln) { throw "No solution .sln found (pattern: $pattern)" }
          "sln=$sln" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Setup .NET SDK ${{ matrix.sdk }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.sdk }}
          cache: true

      - name: Restore
        if: ${{ inputs.restore_build_first }}
        run: dotnet restore "${{ steps.sln.outputs.sln }}"

      - name: Build
        if: ${{ inputs.restore_build_first }}
        run: dotnet build "${{ steps.sln.outputs.sln }}" --configuration "${{ inputs.build_configuration }}" --no-restore

      - name: Test
        id: test
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $sln = '${{ steps.sln.outputs.sln }}'
          $verbosity = '${{ inputs.test_verbosity }}'
          $cfg = '${{ inputs.build_configuration }}'
          # Determine frameworks: use input or auto-detect from *.Tests.csproj
          $frameworks = @(); try { $raw = '${{ inputs.frameworks }}'; if ($raw -and $raw -ne '[]') { $frameworks = ConvertFrom-Json -InputObject $raw } } catch { }
          if ($frameworks.Count -eq 0) {
            $set = [System.Collections.Generic.HashSet[string]]::new([System.StringComparer]::OrdinalIgnoreCase)
            $testProjects = Get-ChildItem -Recurse -Path . -Filter *.csproj | Where-Object { $_.Name -match '\\.Tests\\.csproj$' }
            foreach ($proj in $testProjects) {
              try {
                [xml]$xml = Get-Content -LiteralPath $proj.FullName
                $tfs = @();
                $tfs += ($xml.Project.PropertyGroup.TargetFrameworks | ForEach-Object { $_.InnerText })
                $tfs += ($xml.Project.PropertyGroup.TargetFramework  | ForEach-Object { $_.InnerText })
                foreach ($tf in ($tfs -split ';' | Where-Object { $_ -and $_.Trim() } | ForEach-Object { $_.Trim() })) { [void]$set.Add($tf) }
              } catch { }
            }
            $frameworks = @($set)
            if ($env:RUNNER_OS -ne 'Windows') { $frameworks = @($frameworks | Where-Object { $_ -notmatch '^net4' }) }
          }
          if ($frameworks.Count -eq 0) { $frameworks = @('') }

          function Run-Test($fw) {
            $fwArg = if ($fw) { "--framework $fw" } else { '' }
            $fwSafe = if ($fw) { $fw } else { 'all' }
            $subdir = Join-Path -Path 'artifacts/TestResults' -ChildPath ("fw-$fwSafe")
            New-Item -ItemType Directory -Force -Path $subdir | Out-Null
            $logName = "results-$fwSafe.trx"
            dotnet test $sln --configuration $cfg --no-build --verbosity $verbosity --logger "console;verbosity=$verbosity" --logger "trx;LogFileName=$logName" --results-directory "$subdir" --collect:"XPlat Code Coverage" $fwArg
            return $LASTEXITCODE
          }

          $overall = 0
          foreach ($fw in $frameworks) {
            $code = Run-Test $fw
            if ($code -ne 0) { $overall = $code }
          }
          exit $overall
        timeout-minutes: 30

      - name: Summarize failing tests
        if: failure() && inputs.summarize_failures
        uses: evotecit/github-actions/.github/actions/dotnet-test-summary@master

      - name: Upload TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trx-${{ runner.os }}-${{ matrix.sdk }}
          path: 'artifacts/TestResults/**/*.trx'

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ runner.os }}-${{ matrix.sdk }}
          path: '**/coverage.cobertura.xml'

      - name: Upload to Codecov
        if: always() && inputs.enable_codecov
        uses: codecov/codecov-action@v4
        with:
          files: '**/coverage.cobertura.xml'
          token: ${{ inputs.codecov_token || secrets.CODECOV_TOKEN }}

      - name: Emit test counts JSON
        if: always()
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $all = Get-ChildItem -Path 'artifacts/TestResults' -Filter *.trx -Recurse -ErrorAction SilentlyContinue
          $outDir = Join-Path $PWD 'artifacts/Counts'
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          foreach ($trx in $all) {
            $fw  = ($trx.Directory.Name -replace '^fw-',''); if (-not $fw) { $fw = 'all' }
            $total = 0; $failed = 0; $passed = 0; $skipped = 0
            try {
              $nodes = Select-Xml -Path $trx.FullName -XPath "//UnitTestResult"
              foreach ($n in $nodes) {
                $total++
                switch ($n.Node.outcome) {
                  'Passed' { $passed++ }
                  'Failed' { $failed++ }
                  'Error'  { $failed++ }
                  'Timeout' { $failed++ }
                  'Aborted' { $failed++ }
                  default { $skipped++ }
                }
              }
            } catch { }
            $obj = [ordered]@{ kind='dotnet'; os="$env:RUNNER_OS"; sdk='${{ matrix.sdk }}'; framework=$fw; total=$total; passed=$passed; failed=$failed; skipped=$skipped }
            $jsonPath = Join-Path $outDir ("dotnet-$($env:RUNNER_OS)-${{ matrix.sdk }}-$fw.json")
            ($obj | ConvertTo-Json -Depth 4) | Out-File -FilePath $jsonPath -Encoding utf8 -Force
          }

      - name: Upload test counts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: counts-${{ runner.os }}-${{ matrix.sdk }}
          path: artifacts/Counts/*.json
